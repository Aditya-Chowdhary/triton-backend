// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: token.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createNewToken = `-- name: CreateNewToken :exec

INSERT INTO tokens (hash,user_uuid,expiry,scope)
VALUES ($1, $2, $3, $4)
`

type CreateNewTokenParams struct {
	Hash     []byte             `json:"hash"`
	UserUuid uuid.UUID          `json:"user_uuid"`
	Expiry   pgtype.Timestamptz `json:"expiry"`
	Scope    string             `json:"scope"`
}

// -- name: GetNewAccessTokenByRefreshToken :one
// SELECT new_access_token
// FROM tokens
// WHERE refresh_token = @refresh_token AND is_valid = true;
func (q *Queries) CreateNewToken(ctx context.Context, arg CreateNewTokenParams) error {
	_, err := q.db.Exec(ctx, createNewToken,
		arg.Hash,
		arg.UserUuid,
		arg.Expiry,
		arg.Scope,
	)
	return err
}

const deleteTokenByToken = `-- name: DeleteTokenByToken :exec
DELETE FROM tokens
WHERE hash = $1
`

func (q *Queries) DeleteTokenByToken(ctx context.Context, hash []byte) error {
	_, err := q.db.Exec(ctx, deleteTokenByToken, hash)
	return err
}

const deleteTokenForUser = `-- name: DeleteTokenForUser :exec
DELETE FROM tokens
WHERE user_uuid = $1
`

func (q *Queries) DeleteTokenForUser(ctx context.Context, userUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTokenForUser, userUuid)
	return err
}
