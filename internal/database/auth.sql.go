// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (auth_type, oauth_id)
VALUES ($1, $2)
RETURNING uuid
`

type CreateUserParams struct {
	AuthType string `json:"auth_type"`
	OauthID  string `json:"oauth_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.AuthType, arg.OauthID)
	var uuid uuid.UUID
	err := row.Scan(&uuid)
	return uuid, err
}

const getUserByOAuthID = `-- name: GetUserByOAuthID :one
SELECT uuid
FROM users
WHERE auth_type = $1 AND oauth_id = $2
`

type GetUserByOAuthIDParams struct {
	AuthType string `json:"auth_type"`
	OauthID  string `json:"oauth_id"`
}

func (q *Queries) GetUserByOAuthID(ctx context.Context, arg GetUserByOAuthIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByOAuthID, arg.AuthType, arg.OauthID)
	var uuid uuid.UUID
	err := row.Scan(&uuid)
	return uuid, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT users.uuid, users.created_at, users.oauth_id
FROM users
INNER JOIN tokens
ON users.uuid = tokens.user_uuid
WHERE tokens.hash = $1
AND tokens.scope = $2
AND tokens.expiry > $3
`

type GetUserByTokenParams struct {
	Hash   []byte             `json:"hash"`
	Scope  string             `json:"scope"`
	Expiry pgtype.Timestamptz `json:"expiry"`
}

type GetUserByTokenRow struct {
	Uuid      uuid.UUID          `json:"uuid"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	OauthID   string             `json:"oauth_id"`
}

func (q *Queries) GetUserByToken(ctx context.Context, arg GetUserByTokenParams) (GetUserByTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserByToken, arg.Hash, arg.Scope, arg.Expiry)
	var i GetUserByTokenRow
	err := row.Scan(&i.Uuid, &i.CreatedAt, &i.OauthID)
	return i, err
}
