// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (uuid, auth_type, oauth_id)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Uuid     uuid.UUID `json:"uuid"`
	AuthType string    `json:"auth_type"`
	OauthID  string    `json:"oauth_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Uuid, arg.AuthType, arg.OauthID)
	return err
}

const getUserByOAuthID = `-- name: GetUserByOAuthID :one
SELECT uuid
FROM users
WHERE auth_type = $1 AND oauth_id = $2
`

type GetUserByOAuthIDParams struct {
	AuthType string `json:"auth_type"`
	OauthID  string `json:"oauth_id"`
}

func (q *Queries) GetUserByOAuthID(ctx context.Context, arg GetUserByOAuthIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByOAuthID, arg.AuthType, arg.OauthID)
	var uuid uuid.UUID
	err := row.Scan(&uuid)
	return uuid, err
}
